Хабр Geektimes Тостер Мой круг Фрилансим Публикации Пользователи Хабы Компании Песочница Войти Регистрация Badoo 389,00 Big Dating myltik вчера в 18:01 Анимации в iOS-приложениях, рождённые на сервере Блог компании Badoo, Swift, Дизайн мобильных приложений, Разработка мобильных приложений, Разработка под iOS Полгода назад мы представили одну из самых впечатляющих функций Badoo — прямые трансляции. Среди прочего она позволяет пользователям выразить благодарность любимым стримерам в виде подарков. Мы хотели сделать эти подарки максимально яркими и привлекательными, поэтому решили их оживить — другими словами, анимировать. А чтобы было ещё интереснее, мы планировали обновлять подарки и анимации каждые несколько недель. iOS-инженеры наверняка догадались, о каких объёмах работы идёт речь: чтобы удалять старые и добавлять новые анимации, необходимо совершить множество действий с клиентской стороны. Для этого в каждом релизе должны быть задействованы Android- и iOS-команды, а вкупе со временем, необходимым на одобрение обновления в App Store, это означает, что запуск каждого релиза с обновлёнными анимациями может занять несколько дней. Однако нам удалось решить эту проблему, и сейчас я расскажу как. Архитектура решения К тому времени мы уже умели экспортировать анимации Adobe After Effects (далее — AAE) в понятный нашему iOS-приложению формат при помощи библиотеки Lottie. В этот раз мы пошли чуть дальше: решили хранить все актуальные анимации на сервере и скачивать их по мере необходимости. Пример реальной анимации в нашем приложении, полученной таким способом: Однако в этом посте в качестве примера я возьму простенькую анимацию, которую создал сам. Она не такая креативная, как в Badoo, но вполне подходит для демонстрации нашего подхода. Экспорт анимаций AAE-проект, который я использую, можно найти вместе с другими исходниками на GitHub. Итак, открыв проект, расположенный по адресу _raw/animations/Fancy/Fancy.aep, вы увидите окно: Сейчас я расскажу не о процессе создания анимаций в AAE, а о том, как импортировать уже существующие анимации из AAE в подходящий для iOS-приложения формат при помощи плагина Bodymovin. Установив плагин, откройте его, выбрав в меню Window/Extensions/Bodymovin: Появится окно Bodymovin, в котором можно выбрать анимацию для экспорта, папку для сохранения получившегося файла и открыть настройки экспорта: В настройках анимации мы можем попросить Bodymovin включить ресурсы в JSON-файл, выбрав пункт Assets / Include in json: Наконец, нажатием кнопки Render экспортируем и сохраняем в файл выбранную анимированную композицию. Хранение анимаций на сервере Предположим, что мы загрузили JSON-файлы отрендеренных анимаций на веб-сервер. В нашем случае для простоты я поместил их в репозиторий проекта на GitHub. Анимации доступны здесь: Облака Фейерверки Базовая ссылка https://raw.githubusercontent.com/chupakabr/server-provided-animations/master/_raw/rendered-animations/ Идентификаторы анимаций: clouds.json fireworks.json Примечание: ищете написанный на Swift веб-сервер для анимаций? Решение доступно здесь, а подробное объяснение — в этой статье. Итак, у нас имеется рабочий сервер с анимациями, а потому пора перейти к самой захватывающей части: рендерингу анимаций на экране. Отображение анимаций Сейчас я советую открыть проект демоверсии нашего iOS-приложения, так как он содержит весь необходимый код и настройки. Загрузка анимаций Учитывая, что REST API для получения данных уже готов, пришло время ввести протокол поставщика данных и добавить его имплементацию, которая скачивает данные с сервера: import Lottie

protocol AnimationsProviderProtocol {
    typealias Completion = (_ animation: LOTComposition?) -> Void

    func loadAnimation(byId id: String, completion: @escaping Completion)
}

final class ServerAnimationProvider: AnimationsProviderProtocol {
    private let endpoint: URL

    init(endpoint: URL) {
        self.endpoint = endpoint
    }

    func loadAnimation(byId id: String, completion: @escaping Completion) {
        let path = "/\(id).json"
        guard let animationUrl = URL(string: path, relativeTo: self.endpoint) else {
            completion(nil)
            return
        }

        URLSession.shared.invalidateAndCancel()

        let task = URLSession.shared.dataTask(with: animationUrl) { (data, response, error) in
            guard error == nil, let data = data, let json = self.parseJson(from: data) else {
                completion(nil)
                return
            }
            let animation = LOTComposition(json: json)
            completion(animation)
        }
        task.resume()
    }

    private func parseJson(from data: Data?) -> [AnyHashable : Any]? {
        guard let data = data else { return nil }

        do {
            let json = try JSONSerialization.jsonObject(with: data, options: []) as? [AnyHashable : Any]
            return json
        } catch {
            return nil
        }
    }
} Этот класс поставщика данных позволяет нам по запросу загружать с сервера анимации в формате JSON и хранить их в памяти для отрисовки на UI. Предположим, что мы следуем паттерну MVVM, — тогда его легко использовать в сущности ViewModel следующим образом:  // ...
  private let animationProvider: AnimationsProviderProtocol
  private(set) var animationModel: LOTComposition?
  // …
  func loadAnimation(byId animationId: String) {
      self.animationProvider.loadAnimation(byId: animationId) { [weak self] (animationModel) in
          self?.animationModel = animationModel
      }
  }
  // ... ViewModel обновляет свойство выбранной анимации при получении корректного HTTP-ответа от сервера с непустым JSON-объектом. Эти данные используются слоем представления для отображения анимации. Слой представления Теперь мы можем использовать ViewModel для получения доступа к данным анимации и отображать их на UI при помощи встроенного обработчика действия on tap, привязанного к кнопке: class ViewController: UIViewController {
    // ...
    @IBOutlet weak var animationContainer: UIView!

    override func viewDidLoad() {
        super.viewDidLoad()
        // ...
        self.animationView = {
            let view = LOTAnimationView(frame: self.animationContainer.bounds)
            self.animationContainer.addSubview(view)
            return view
        }()
    }

    @IBAction func onPlayAnimationAction(_ sender: Any) {
        self.animationView.stop()

        self.animationView.sceneModel = self.viewModel.animationModel
        self.animationView.play()
    }
} При нажатии на кнопку экземпляр LOTAnimationView обновляется с помощью свежих данных из ViewModel. Вот как это выглядит: Вот и всё. Теперь в приложении отображается анимация, загруженная из нашего REST API (с сервера). Советы и ограничения Хитрости: AAE поддерживает большинство типов объектов, включая растровые и векторные изображения; Bodymovin позволяет внедрять в конечный JSON-файл все ресурсы при помощи Base64 и благодаря этому можно избежать загрузки ресурсов отдельно на клиентской стороне; вы можете либо рисовать прямо в векторе в AAE либо просто импортировать векторные изображения формата Adobe Illustrator. К сожалению, у меня не получилось импортировать в AAE файлы формата SVG (я пытался!). Узнать больше о хитростях и решении возможных проблем вы можете из этой интересной статьи моего коллеги Радослава Сесивы. Заключение Итак, что нам даёт загрузка анимаций с сервера? Самое очевидное преимущество этого подхода — возможность разделить всех участников процесса обновления анимации. Иными словами, чтобы выпустить новую крутую анимацию, дизайнерам достаточно предоставить серверной команде соответствующий JSON-файл. Чтобы удалить анимацию на клиенте, достаточно просто удалить её с сервера. Легко и быстро. Ещё очень здорово, что одни и те же функции можно реализовать на всех поддерживаемых платформах (iOS, Android, Web), не внося изменений в клиент-серверный протокол, серверный код и в сами файлы анимаций непосредственно на клиенте. На этом всё. Спасибо за внимание! Полезные ссылки "Behind the scenes with importing Adobe After Effects animation into Badoo iOS app" by Radoslaw Cieciwa; Bodymovin plugin for AAE by AirbnbEng; Проект целиком доступен здесь на GitHub; Installing bodymovin plugin for AAE by AirbnbEng; Lottie iOS library by AirbnbEng; "REST API with Swift on Vapor" Валерий Чевтаев ZXP plugin installer for AAE. Теги: swift анимации animation lottie ios разработка сервер Добавить метки Пометьте публикацию своими метками Метки лучше разделять запятой. Например: программирование, алгоритмы Сохранить +38 27 2,9k 2 Нарушение Опишите суть нарушения Отправить Выберите рекомендации для отправки автору: Указан только блог Орфографические ошибки Пунктуационные ошибки Отступы Текст-простыня Короткие предложения Смайлики Много форматирования Картинки Ссылки Оформление кода Рекламный характер Отправить Badoo 389,00 Big Dating 19,0 Карма 45,6 Рейтинг 1 Подписчики Valeron myltik ninja Сайт Поделиться публикацией Похожие публикации 16 июля 2018 в 18:01 Как проверить гипотезы и заработать на Swift с помощью сплит-тестов +47 7,7k 46 1 21 июня 2018 в 18:01 Swift 4.1: почему Apple переименовала flatMap в compactMap +31 10,4k 35 6 14 декабря 2017 в 15:20 Синглтон, локатор сервисов и тесты в iOS +27 6,7k 28 4 Вакансии компании Badoo Senior PHP Developer (BI) Москва Полный рабочий день Senior Billing QA engineer Москва Полный рабочий день QA engineer Москва Полный рабочий день Вакансии компании Создать резюме Комментарии 2 RomanBambura сегодня в 13:19 +1 Очень даже прикольно! И отличный путь создания анимации iago сегодня в 16:57 0 Очень круто, все бы выносили такие вещи по умному на сервер (тему приложения, часть контента, анимации) — жить стало бы гораздо проще. Только это не совсем MVVM, понимаю что код сокращенный но что-то не вижу смысла 3 раза копировать animationModel, если логика запуска анимации все равно ложится на контроллер, т.е. от MVC бы особо не ушли. Но это мелочи, подход классный, за полный цикл экспорта отдельный респект, уверен людям пригодится! Только полноправные пользователи могут оставлять комментарии. Войдите, пожалуйста. Информация Дата основания 2006 год Локация Москва Россия Сайт badoo.com Численность 201–500 человек Дата регистрации 15 декабря 2009 г. Facebook Ссылки Вакансии в Badoo tech.badoo.com GitHub github.com Видео выступлений www.youtube.com OpenSource tech.badoo.com Команда Badoo tech.badoo.com ВКонтакте Приложения Badoo Cамая большая сеть знакомств в мире iOS Android Блог на Хабре Анимации в iOS-приложениях, рождённые на сервере 2,9k 2 Courier: миграция Dropbox на gRPC 4,1k 0 Liveprof покажет, когда и почему менялась производительность вашего PHP-приложения 8,5k 6 Xcode 10.2, macOS Mojave 10.14.4, iOS 12.1 и другие бета-версии 6,6k 4 Как встроить С-библиотеку в Swift-фреймворк 2,9k 0 Покрываем A/B-тесты UI-тестами. Как не запутаться в собственном коде 7k 2 RoadRunner: PHP не создан, чтобы умирать, или Golang спешит на помощь 25k 53 Оптимизация реляционных баз данных без даунтайма на примере самой нагруженной БД в Badoo 18,5k 22 Jira против хаоса в разработке: как не терять задачи 11,6k 11 Иголка в стоге сессий, или Байт-код регулярных выражений 11,9k 25 Самое читаемое Сутки Неделя Месяц Про удивительность пчелы, и то, как мы её убиваем +243 44,9k 206 193 Окей, Google! Ты добро или зло? +156 40,6k 49 181 Как стать Java разработчиком за 1,5 года +64 30,8k 441 82 Учёные нашли самое старое живое позвоночное на Земле +62 109k 64 182 Зарплаты в ИТ во втором полугодии 2018 года: по данным калькулятора зарплат «Моего круга» +55 35,6k 59 65 Как я год не работал в Сбербанке +403 196k 305 516 Учёные нашли самое старое живое позвоночное на Земле +62 109k 64 182 Ракета 9М729. Несколько слов о “нарушителе” Договора РСМД +35 78,4k 51 1225 Пермский программист арестован за создание мобильного приложения, через которое действовал педофил +165 73,9k 50 497 Почему Windows в 2019 году не рулит, или ЧЯДНТ? +50 66,1k 84 718 Выброшенные на помойку умные лампочки — ценный источник личной информации +62 215k 92 147 Как я год не работал в Сбербанке +403 196k 305 516 Хотите вечных светодиодов? Расчехляйте паяльники и напильники. Или домашнее освещение самодельщика +88 145k 238 261 1 февраля 2019 года ваш сайт может перестать работать +81 141k 154 162 Про одного парня +207 112k 655 244 Аккаунт Войти Регистрация Разделы Публикации Хабы Компании Пользователи Песочница Информация Правила Помощь Документация Соглашение Конфиденциальность Услуги Реклама Тарифы Контент Семинары Приложения © 2006 – 2019 «TM» Настройка языка О сайте Служба поддержки Мобильная версия Настройка языка Интерфейс Русский English Язык публикаций Русский English Сохранить настройки